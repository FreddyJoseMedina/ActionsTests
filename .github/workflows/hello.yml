name: Check Liquibase Annotations.
on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
jobs:
  job-name:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:

    
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v14.4
        with:
          since_last_remote_commit: 'true'
      - name: get_modified_files
        id: diff
        working-directory: './diff_files'
        run: |
          git config diff.renameLimit 99000
          git fetch origin $GITHUB_BASE_REF --depth=1
          touch files.txt
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo $file >> files.txt
          done
          cat files.txt | split -l 100 -a 8
          rm files.txt
          export filename_string=""
          for i in `ls`; do export filename_string=$filename_string"file!"$i; done
          echo "::set-output name=filenames::$filename_string"

          

      - name: Say Hello
        run: echo "Hello world!"
      - name: Do stuff
        run: |
          echo "Step 1..."
          echo "Step 2..."
          echo "Step 3..."
      - name: check dir
        run: ls
      - name: check Database
        run: cd Database && ls

      - name: check first line
        run: |
          cd Database &&
          i=0 && keyWord="--liquibase formatted sql" &&
          for file in *; do
          [ -f "$file" ] || continue
          IFS= read -r line < "$file" || [ -n "$line" ] || continue
          case $line in
          ($keyWord);; *) ((i=i+1)) && echo File: ["$file"], No match Liquibase Annotation on first line.;;
          esac
          done &&
          if (($i != 0)); then 
          exit 0 
          fi; 
          
      - name: check date
        run: date 
      - name: Say Goodbye
        run: echo "Goodbye!"
      
      - name: Add comment to PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const name = '${{ github.workflow   }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `Workflow ${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\nMore details at: ${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            }) 
