name: hello-world-II
on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
jobs:
  job-name:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:          
      - name: Get PR branch
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}
      - name: Say Hello
        run: echo "Hello world!"
      - name: Do stuff
        run: |
          echo "Step 1..."
          echo "Step 2..."
          echo "Step 3..."
      - name: check dir
        run: ls
      - name: check Database
        run: cd Database && ls
        id: id_1
      - name: check grep
        run: |
          cd Database &&
          i=0 && keyWord="--liquibase formatted sql" &&
          for file in *; do
          [ -f "$file" ] || continue
          IFS= read -r line < "$file" || [ -n "$line" ] || continue
          case $line in
          ($keyWord);; *) array[$i]="File: ["$file"], No match Liquibase Annotation on first line." && ((i=i+1)) && echo $array[$i];;
          esac
          done &&
          if (($i != 0)); then 
          exit 0 
          fi; 
        id: run_tests
      - name: check date
        run: date && echo "${{steps.run_tests.outputs.array}}"
      - name: Say Goodbye
        run: echo "Goodbye!"
      
      - name: Add comment to PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const message = '${{join(steps.run_tests.outputs.*, '\n')}}';
            const message1 = '${{join(steps.id_1.outputs.*, '\n')}}';
            const name = '${{ github.workflow   }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `${message1}, ${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\n${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            }) 
