name: Check Liquibase Annotations.
on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
jobs:


  changedfiles:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      all: ${{ steps.changes.outputs.all}}
      ts: ${{ steps.changes.outputs.ts }}
    steps:
        # Make sure we have some code to diff.
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Get changed files
        id: changes
        # Set outputs using the command.
        run: |
          echo "::set-output name=all::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs)"
          echo "::set-output name=ts::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep .ts$ | xargs)"
  lint:
    runs-on: ubuntu-latest
    # require the first job to have ran
    needs: changedfiles
    # only run there are changed files
    if: ${{needs.changedfiles.outputs.ts}}
    steps:
      - name: echo changed files
        run: echo ${{needs.changedfiles.outputs.ts}}          
  

          

      - name: Say Hello
        run: echo "Hello world!"
      - name: Do stuff
        run: |
          echo "Step 1..."
          echo "Step 2..."
          echo "Step 3..."
      - name: check dir
        run: ls
      - name: check Database
        run: cd Database && ls

      - name: check first line
        run: |
          cd Database &&
          i=0 && keyWord="--liquibase formatted sql" &&
          for file in *; do
          [ -f "$file" ] || continue
          IFS= read -r line < "$file" || [ -n "$line" ] || continue
          case $line in
          ($keyWord);; *) ((i=i+1)) && echo File: ["$file"], No match Liquibase Annotation on first line.;;
          esac
          done &&
          if (($i != 0)); then 
          exit 0 
          fi; 
          
      - name: check date
        run: date 
      - name: Say Goodbye
        run: echo "Goodbye!"
      
      - name: Add comment to PR
        uses: actions/github-script@v6
        if: 1>0
        with:
          script: |
            const name = '${{ github.workflow   }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `Workflow ${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\nMore details at: ${url}`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            }) 
